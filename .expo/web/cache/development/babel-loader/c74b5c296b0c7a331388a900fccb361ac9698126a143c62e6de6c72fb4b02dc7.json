{"ast":null,"code":"var _jsxFileName = \"/Users/Felipe/Documents/app-vb/app-vb/src/navigation/AppNavigator.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TaskListScreen from '../screens/TaskListScreen';\nimport AddTaskScreen from '../screens/AddTaskScreen';\nimport { loadTasks, saveTasks } from '../storage/tasksStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stack = createStackNavigator();\nconst styles = StyleSheet.create({\n  header: {\n    backgroundColor: '#6200ee'\n  }\n});\nconst AppNavigator = () => {\n  const defaultTasks = [{\n    id: 1,\n    text: 'Comprar pão',\n    completed: false\n  }, {\n    id: 2,\n    text: 'Estudar React Native',\n    completed: true\n  }, {\n    id: 3,\n    text: 'Passear com o cachorro',\n    completed: false\n  }];\n  const [tasks, setTasks] = useState(defaultTasks);\n  const [hydrated, setHydrated] = useState(false);\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      const stored = await loadTasks();\n      if (mounted && stored && Array.isArray(stored) && stored.length >= 0) {\n        setTasks(stored);\n      }\n      if (mounted) setHydrated(true);\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (hydrated) {\n      saveTasks(tasks);\n    }\n  }, [tasks, hydrated]);\n  return _jsxDEV(Stack.Navigator, {\n    initialRouteName: \"TaskList\",\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsxDEV(Stack.Screen, {\n      name: \"TaskList\",\n      children: props => _jsxDEV(TaskListScreen, Object.assign({}, props, {\n        tasks: tasks,\n        setTasks: setTasks,\n        removeTask: id => setTasks(prev => prev.filter(t => t.id !== id))\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), _jsxDEV(Stack.Screen, {\n      name: \"AddTask\",\n      options: {\n        headerShown: true,\n        title: 'Adicionar Nova Tarefa',\n        headerStyle: styles.header,\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          color: '#fff',\n          fontSize: 18\n        }\n      },\n      children: props => _jsxDEV(AddTaskScreen, Object.assign({}, props, {\n        addTask: newTaskText => {\n          const newTask = {\n            id: Date.now(),\n            text: newTaskText,\n            completed: false\n          };\n          setTasks(prevTasks => [...prevTasks, newTask]);\n        }\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\nexport default AppNavigator;","map":{"version":3,"names":["React","useEffect","useState","createStackNavigator","StyleSheet","TaskListScreen","AddTaskScreen","loadTasks","saveTasks","jsxDEV","_jsxDEV","Stack","styles","create","header","backgroundColor","AppNavigator","defaultTasks","id","text","completed","tasks","setTasks","hydrated","setHydrated","mounted","stored","Array","isArray","length","Navigator","initialRouteName","screenOptions","headerShown","children","Screen","name","props","Object","assign","removeTask","prev","filter","t","fileName","_jsxFileName","lineNumber","columnNumber","options","title","headerStyle","headerTintColor","headerTitleStyle","color","fontSize","addTask","newTaskText","newTask","Date","now","prevTasks"],"sources":["/Users/Felipe/Documents/app-vb/app-vb/src/navigation/AppNavigator.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StyleSheet } from 'react-native';\n\nimport TaskListScreen from '../screens/TaskListScreen';\nimport AddTaskScreen from '../screens/AddTaskScreen';\nimport { RootStackParamList, Task } from '../types';\nimport { loadTasks, saveTasks } from '../storage/tasksStorage';\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst styles = StyleSheet.create({\n  header: {\n    backgroundColor: '#6200ee',\n  },\n});\n\nconst AppNavigator: React.FC = () => {\n  const defaultTasks: Task[] = [\n    { id: 1, text: 'Comprar pão', completed: false },\n    { id: 2, text: 'Estudar React Native', completed: true },\n    { id: 3, text: 'Passear com o cachorro', completed: false },\n  ];\n  const [tasks, setTasks] = useState<Task[]>(defaultTasks);\n  const [hydrated, setHydrated] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      const stored = await loadTasks();\n      if (mounted && stored && Array.isArray(stored) && stored.length >= 0) {\n        setTasks(stored);\n      }\n      if (mounted) setHydrated(true);\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    if (hydrated) {\n      saveTasks(tasks);\n    }\n  }, [tasks, hydrated]);\n\n  return (\n    <Stack.Navigator initialRouteName=\"TaskList\" screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"TaskList\">\n        {(props) => (\n          <TaskListScreen\n            {...props}\n            tasks={tasks}\n            setTasks={setTasks}\n            removeTask={(id: number) =>\n              setTasks((prev) => prev.filter((t) => t.id !== id))\n            }\n          />\n        )}\n      </Stack.Screen>\n      <Stack.Screen\n        name=\"AddTask\"\n        options={{\n          headerShown: true,\n          title: 'Adicionar Nova Tarefa',\n          headerStyle: styles.header,\n          headerTintColor: '#fff',\n          headerTitleStyle: { color: '#fff', fontSize: 18 },\n        }}\n      >\n        {(props) => (\n          <AddTaskScreen\n            {...props}\n            addTask={(newTaskText) => {\n              const newTask: Task = {\n                id: Date.now(),\n                text: newTaskText,\n                completed: false,\n              };\n              setTasks((prevTasks) => [...prevTasks, newTask]);\n            }}\n          />\n        )}\n      </Stack.Screen>\n    </Stack.Navigator>\n  );\n};\n\nexport default AppNavigator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}